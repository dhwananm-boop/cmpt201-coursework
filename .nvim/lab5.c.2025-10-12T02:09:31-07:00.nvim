#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

// A large value to initialize the minimum size for best-fit
#define INF UINT64_MAX 

struct header {
  uint64_t size;
  struct header *next;
  int id;
};

void initialize_block(struct header *block, uint64_t size, struct header *next,
                      int id) {
  block->size = size;
  block->next = next;
  block->id = id;
}

/**
 * Finds the first free block in the list that is large enough.
 */
int find_first_fit(struct header *free_list_ptr, uint64_t size) {
  struct header *current = free_list_ptr;
  // Traverse the linked list
  while (current != NULL) {
    // If we find a block that is big enough, return its ID immediately.
    if (current->size >= size) {
      return current->id;
    }
    current = current->next;
  }
  // If the loop finishes, no suitable block was found.
  return -1;
}

/**
 * Finds the smallest block that is large enough to fit the requested size.
 */
int find_best_fit(struct header *free_list_ptr, uint64_t size) {
  int best_fit_id = -1;
  uint64_t min_sufficient_size = INF; // Start with a very large number
  struct header *current = free_list_ptr;

  // Traverse the entire list to check all blocks
  while (current != NULL) {
    // Check if the block is big enough AND a better fit than the best one so far
    if (current->size >= size && current->size < min_sufficient_size) {
      // We found a new best fit! Update our trackers.
      min_sufficient_size = current->size;
      best_fit_id = current->id;
    }
    current = current->next;
  }
  return best_fit_id;
}

/**
 * Finds the largest available block in the free list.
 */
int find_worst_fit(struct header *free_list_ptr, uint64_t size) {
  int worst_fit_id = -1;
  uint64_t max_size = 0; // Start with the smallest possible size
  struct header *current = free_list_ptr;

  // Traverse the entire list to check all blocks
  while (current != NULL) {
    // Check if the current block is big enough AND larger than the worst-fit so far
    if (current->size >= size && current->size > max_size) {
      // We found a new worst fit! Update our trackers.
      max_size = current->size;
      worst_fit_id = current->id;
    }
    current = current->next;
  }
  return worst_fit_id;
}

int main(void) {

  // Allocate memory for 5 free blocks
  struct header *free_block1 = (struct header*) malloc(sizeof(struct header));
  struct header *free_block2 = (struct header*) malloc(sizeof(struct header));
  struct header *free_block3 = (struct header*) malloc(sizeof(struct header));
  struct header *free_block4 = (struct header*) malloc(sizeof(struct header));
  struct header *free_block5 = (struct header*) malloc(sizeof(struct header));

  // Create a linked list of free blocks: [6] -> [12] -> [24] -> [8] -> [4] -> NULL
  initialize_block(free_block1, 6, free_block2, 1);
  initialize_block(free_block2, 12, free_block3, 2);
  initialize_block(free_block3, 24, free_block4, 3);
  initialize_block(free_block4, 8, free_block5, 4);
  initialize_block(free_block5, 4, NULL, 5);

  struct header *free_list_ptr = free_block1;

  // Find the IDs for a requested size of 7
  int first_fit_id = find_first_fit(free_list_ptr, 7);
  int best_fit_id = find_best_fit(free_list_ptr, 7);
  int worst_fit_id = find_worst_fit(free_list_ptr, 7);

  // Print out the IDs
  printf("The ID for First-Fit algorithm is: %d\n", first_fit_id);
  printf("The ID for Best-Fit algorithm is: %d\n", best_fit_id);
  printf("The ID for Worst-Fit algorithm is: %d\n", worst_fit_id);

  // Clean up allocated memory
  free(free_block1);
  free(free_block2);
  free(free_block3);
  free(free_block4);
  free(free_block5);
  
  return 0;
}
